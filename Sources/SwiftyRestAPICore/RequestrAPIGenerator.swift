//
//  RequestrAPIGenerator.swift
//  SwiftyRestAPIPackageDescription
//
//  Created by Daniel Lozano ValdÃ©s on 9/29/17.
//

import Foundation

final class RequestrAPIGenerator: APIGenerator {

    private let api: API

    lazy var basePath: String = {
        return api.basePath
    }()

    lazy var allEndpoints: [API.Endpoint] = {
        return api.categories.flatMap { $0.endpoints }
    }()

    // MARK: - API Generator

    init(api: API) {
        self.api = api
    }

    // MARK: Helper's

    private func makeHeader(fileName: String) -> String {
        return  """
        //
        // \(fileName)
        // SwiftyRestAPI
        //
        // Autogenerated by SwifyRestAPI
        // Created with love by Icalia Labs
        //
        """
    }

}

// MARK: - Endpoints File

extension RequestrAPIGenerator {

    func makeEndpointsFile() -> FileText {
        return """
        \(makeHeader(fileName: "Endpoints.swift"))

        enum Endpoint {

        \(makeBaseURL(with: basePath))

        \(makeEnumCases(for: allEndpoints))

        \(makeFullPathComputedProperty(for: allEndpoints))

        }

        """
    }

    // MARK:  Helper's

    private func makeBaseURL(with baseURL: String) -> String {
        return """
        static let baseURL = "\(baseURL)"
        """
    }

    private func makeEnumCases(for endpoints: [API.Endpoint]) -> String {
        var string = ""
        for endpoint in endpoints {
            string += """
            case \(endpoint.name)

            """
        }
        return String(string.dropLast()) // Remove last \n
    }

    private func makeFullPathComputedProperty(for endpoints: [API.Endpoint]) -> String {
        var string = ""
        string += """
        var fullPath: String {
        let path: String
        switch self {

        """
        for endpoint in endpoints {
            string += """
            case .\(endpoint.name):
            path = "\(endpoint.relativePath)"

            """
        }
        string += """
        }
        return Endpoint.baseURL + path
        }
        """
        return string
    }

}

// MARK: - Service Files

extension RequestrAPIGenerator {

    func makeServiceFiles() -> [FileText] {
        return api.categories.map(makeServiceFile)
    }

    // MARK: Helper's

    private func protocolName(for category: API.Category) -> String {
        return "\(category.name)Service"
    }

    private func makeServiceFile(for category: API.Category) -> FileText {
        return """
        \(makeHeader(fileName: "\(protocolName(for: category)).swift"))

        import Foundation
        import Requestr

        \(makeServiceProtocol(for: category))

        """
    }

    private func makeServiceProtocol(for category: API.Category) -> String {
        return """
        protocol \(category.name)Service {

        \(makeServiceProtocolMethods(for: category))

        }
        """
    }

    private func makeServiceProtocolMethods(for category: API.Category) -> String {
        var string = ""
        for endpoint in category.endpoints {
            var resourceName = endpoint.resourceName
            if endpoint.isResourceArray {
                resourceName.insert("[", at: resourceName.startIndex)
                resourceName.insert("]", at: resourceName.endIndex)
            }
            string += """
                func \(endpoint.name)(completion: @escaping (ApiResult<\(resourceName)>) -> Void)


            """
        }
        return String(string.dropLast()) // Remove last \n
    }

}
