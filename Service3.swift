//
// MonitorsService.swift
// SwiftyRestAPI
//
// Autogenerated by SwifyRestAPI
// Created with love by Icalia Labs
//

import Foundation
import Requestr

protocol MonitorsService {

    func allMonitors(completion: @escaping (ApiResult<AllMonitors>) -> Void)

    func singleMonitor(completion: @escaping (ApiResult<SingleMonitor>) -> Void)

    func createMonitor(completion: @escaping (ApiResult<CreateMonitor>) -> Void)

    func updateMonitor(completion: @escaping (ApiResult<UpdateMonitor>) -> Void)

    func deleteMonitor(completion: @escaping (ApiResult<DeleteMonitor>) -> Void)

    func runaMonitor(completion: @escaping (ApiResult<RunaMonitor>) -> Void)

}

class MonitorsApiService {

    let apiClient: ApiClient

    init(apiClient: ApiClient) {
        self.apiClient = apiClient
    }

}


extension MonitorsApiService: MonitorsService {

    func allMonitors(completion: @escaping (ApiResult<AllMonitors>) -> Void) {
        let endpoint = Endpoint.allMonitors
        apiClient.GET(endpoint.fullPath) { (result) in
            completion(Result(apiResult: result))
        }
    }

    func singleMonitor(completion: @escaping (ApiResult<SingleMonitor>) -> Void) {
        let endpoint = Endpoint.singleMonitor
        apiClient.GET(endpoint.fullPath) { (result) in
            completion(Result(apiResult: result))
        }
    }

    func createMonitor(completion: @escaping (ApiResult<CreateMonitor>) -> Void) {
        let endpoint = Endpoint.createMonitor
        apiClient.POST(endpoint.fullPath) { (result) in
            completion(Result(apiResult: result))
        }
    }

    func updateMonitor(completion: @escaping (ApiResult<UpdateMonitor>) -> Void) {
        let endpoint = Endpoint.updateMonitor
        apiClient.PUT(endpoint.fullPath) { (result) in
            completion(Result(apiResult: result))
        }
    }

    func deleteMonitor(completion: @escaping (ApiResult<DeleteMonitor>) -> Void) {
        let endpoint = Endpoint.deleteMonitor
        apiClient.DELETE(endpoint.fullPath) { (result) in
            completion(Result(apiResult: result))
        }
    }

    func runaMonitor(completion: @escaping (ApiResult<RunaMonitor>) -> Void) {
        let endpoint = Endpoint.runaMonitor
        apiClient.POST(endpoint.fullPath) { (result) in
            completion(Result(apiResult: result))
        }
    }

}
