//
// MocksService.swift
// SwiftyRestAPI
//
// Autogenerated by SwifyRestAPI
// Created with love by Icalia Labs
//

import Foundation
import Requestr

protocol MocksService {

    func allMocks(completion: @escaping (ApiResult<AllMocks>) -> Void)

    func singleMock(completion: @escaping (ApiResult<SingleMock>) -> Void)

    func createMock(completion: @escaping (ApiResult<CreateMock>) -> Void)

    func deleteMock(completion: @escaping (ApiResult<DeleteMock>) -> Void)

}

class MocksApiService {

    let apiClient: ApiClient

    init(apiClient: ApiClient) {
        self.apiClient = apiClient
    }

}


extension MocksApiService: MocksService {

    func allMocks(completion: @escaping (ApiResult<AllMocks>) -> Void) {
        let endpoint = Endpoint.allMocks
        apiClient.GET(endpoint.fullPath) { (result) in
            completion(Result(apiResult: result))
        }
    }

    func singleMock(completion: @escaping (ApiResult<SingleMock>) -> Void) {
        let endpoint = Endpoint.singleMock
        apiClient.GET(endpoint.fullPath) { (result) in
            completion(Result(apiResult: result))
        }
    }

    func createMock(completion: @escaping (ApiResult<CreateMock>) -> Void) {
        let endpoint = Endpoint.createMock
        apiClient.POST(endpoint.fullPath) { (result) in
            completion(Result(apiResult: result))
        }
    }

    func deleteMock(completion: @escaping (ApiResult<DeleteMock>) -> Void) {
        let endpoint = Endpoint.deleteMock
        apiClient.DELETE(endpoint.fullPath) { (result) in
            completion(Result(apiResult: result))
        }
    }

}
